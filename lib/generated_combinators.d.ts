import { Parser, ParserStream } from './parser_combinators';
export declare function genericCombine<M, S extends ParserStream<M>, E, A, B>(parsers: Parser<M, S, E, A>[], f: (...values: A[]) => B): Parser<M, S, E, B>;
export declare function genericAlt<M, S extends ParserStream<M>, E, T>(parsers: Parser<M, S, E, T>[]): Parser<M, S, E, T>;
export declare function genericChoice<M, S extends ParserStream<M>, E1, E2, T>(parsers: [Parser<M, S, E1, unknown>, Parser<M, S, E2, T>][]): Parser<M, S, E1 | E2, T>;
export declare function alt<M, S extends ParserStream<M>, E, T1, T2>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, E, T2>): Parser<M, S, E, T1 | T2>;
export declare function alt3<M, S extends ParserStream<M>, E, T1, T2, T3>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, unknown, T2>, p3: Parser<M, S, E, T3>): Parser<M, S, E, T1 | T2 | T3>;
export declare function alt4<M, S extends ParserStream<M>, E, T1, T2, T3, T4>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, unknown, T2>, p3: Parser<M, S, unknown, T3>, p4: Parser<M, S, E, T4>): Parser<M, S, E, T1 | T2 | T3 | T4>;
export declare function alt5<M, S extends ParserStream<M>, E, T1, T2, T3, T4, T5>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, unknown, T2>, p3: Parser<M, S, unknown, T3>, p4: Parser<M, S, unknown, T4>, p5: Parser<M, S, E, T5>): Parser<M, S, E, T1 | T2 | T3 | T4 | T5>;
export declare function alt6<M, S extends ParserStream<M>, E, T1, T2, T3, T4, T5, T6>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, unknown, T2>, p3: Parser<M, S, unknown, T3>, p4: Parser<M, S, unknown, T4>, p5: Parser<M, S, unknown, T5>, p6: Parser<M, S, E, T6>): Parser<M, S, E, T1 | T2 | T3 | T4 | T5 | T6>;
export declare function alt7<M, S extends ParserStream<M>, E, T1, T2, T3, T4, T5, T6, T7>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, unknown, T2>, p3: Parser<M, S, unknown, T3>, p4: Parser<M, S, unknown, T4>, p5: Parser<M, S, unknown, T5>, p6: Parser<M, S, unknown, T6>, p7: Parser<M, S, E, T7>): Parser<M, S, E, T1 | T2 | T3 | T4 | T5 | T6 | T7>;
export declare function alt8<M, S extends ParserStream<M>, E, T1, T2, T3, T4, T5, T6, T7, T8>(p1: Parser<M, S, unknown, T1>, p2: Parser<M, S, unknown, T2>, p3: Parser<M, S, unknown, T3>, p4: Parser<M, S, unknown, T4>, p5: Parser<M, S, unknown, T5>, p6: Parser<M, S, unknown, T6>, p7: Parser<M, S, unknown, T7>, p8: Parser<M, S, E, T8>): Parser<M, S, E, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;
export declare function combine<M, S extends ParserStream<M>, E1, E2, T1, T2, T3>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, f: (a1: T1, a2: T2) => T3): Parser<M, S, E1 | E2, T3>;
export declare function combine3<M, S extends ParserStream<M>, E1, E2, E3, T1, T2, T3, T4>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, p3: Parser<M, S, E3, T3>, f: (a1: T1, a2: T2, a3: T3) => T4): Parser<M, S, E1 | E2 | E3, T4>;
export declare function combine4<M, S extends ParserStream<M>, E1, E2, E3, E4, T1, T2, T3, T4, T5>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, p3: Parser<M, S, E3, T3>, p4: Parser<M, S, E4, T4>, f: (a1: T1, a2: T2, a3: T3, a4: T4) => T5): Parser<M, S, E1 | E2 | E3 | E4, T5>;
export declare function combine5<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, T1, T2, T3, T4, T5, T6>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, p3: Parser<M, S, E3, T3>, p4: Parser<M, S, E4, T4>, p5: Parser<M, S, E5, T5>, f: (a1: T1, a2: T2, a3: T3, a4: T4, a5: T5) => T6): Parser<M, S, E1 | E2 | E3 | E4 | E5, T6>;
export declare function combine6<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, T1, T2, T3, T4, T5, T6, T7>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, p3: Parser<M, S, E3, T3>, p4: Parser<M, S, E4, T4>, p5: Parser<M, S, E5, T5>, p6: Parser<M, S, E6, T6>, f: (a1: T1, a2: T2, a3: T3, a4: T4, a5: T5, a6: T6) => T7): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6, T7>;
export declare function combine7<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, E7, T1, T2, T3, T4, T5, T6, T7, T8>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, p3: Parser<M, S, E3, T3>, p4: Parser<M, S, E4, T4>, p5: Parser<M, S, E5, T5>, p6: Parser<M, S, E6, T6>, p7: Parser<M, S, E7, T7>, f: (a1: T1, a2: T2, a3: T3, a4: T4, a5: T5, a6: T6, a7: T7) => T8): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6 | E7, T8>;
export declare function combine8<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, E7, E8, T1, T2, T3, T4, T5, T6, T7, T8, T9>(p1: Parser<M, S, E1, T1>, p2: Parser<M, S, E2, T2>, p3: Parser<M, S, E3, T3>, p4: Parser<M, S, E4, T4>, p5: Parser<M, S, E5, T5>, p6: Parser<M, S, E6, T6>, p7: Parser<M, S, E7, T7>, p8: Parser<M, S, E8, T8>, f: (a1: T1, a2: T2, a3: T3, a4: T4, a5: T5, a6: T6, a7: T7, a8: T8) => T9): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8, T9>;
export declare function choice<M, S extends ParserStream<M>, E1, E2, E3, T1, T2>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, E3, unknown>, Parser<M, S, E2, T2>]): Parser<M, S, E1 | E2 | E3, T1 | T2>;
export declare function choice3<M, S extends ParserStream<M>, E1, E2, E3, E4, T1, T2, T3>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, unknown, unknown>, Parser<M, S, E2, T2>], p3: [Parser<M, S, E4, unknown>, Parser<M, S, E3, T3>]): Parser<M, S, E1 | E2 | E3 | E4, T1 | T2 | T3>;
export declare function choice4<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, T1, T2, T3, T4>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, unknown, unknown>, Parser<M, S, E2, T2>], p3: [Parser<M, S, unknown, unknown>, Parser<M, S, E3, T3>], p4: [Parser<M, S, E5, unknown>, Parser<M, S, E4, T4>]): Parser<M, S, E1 | E2 | E3 | E4 | E5, T1 | T2 | T3 | T4>;
export declare function choice5<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, T1, T2, T3, T4, T5>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, unknown, unknown>, Parser<M, S, E2, T2>], p3: [Parser<M, S, unknown, unknown>, Parser<M, S, E3, T3>], p4: [Parser<M, S, unknown, unknown>, Parser<M, S, E4, T4>], p5: [Parser<M, S, E6, unknown>, Parser<M, S, E5, T5>]): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6, T1 | T2 | T3 | T4 | T5>;
export declare function choice6<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, E7, T1, T2, T3, T4, T5, T6>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, unknown, unknown>, Parser<M, S, E2, T2>], p3: [Parser<M, S, unknown, unknown>, Parser<M, S, E3, T3>], p4: [Parser<M, S, unknown, unknown>, Parser<M, S, E4, T4>], p5: [Parser<M, S, unknown, unknown>, Parser<M, S, E5, T5>], p6: [Parser<M, S, E7, unknown>, Parser<M, S, E6, T6>]): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6 | E7, T1 | T2 | T3 | T4 | T5 | T6>;
export declare function choice7<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, E7, E8, T1, T2, T3, T4, T5, T6, T7>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, unknown, unknown>, Parser<M, S, E2, T2>], p3: [Parser<M, S, unknown, unknown>, Parser<M, S, E3, T3>], p4: [Parser<M, S, unknown, unknown>, Parser<M, S, E4, T4>], p5: [Parser<M, S, unknown, unknown>, Parser<M, S, E5, T5>], p6: [Parser<M, S, unknown, unknown>, Parser<M, S, E6, T6>], p7: [Parser<M, S, E8, unknown>, Parser<M, S, E7, T7>]): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8, T1 | T2 | T3 | T4 | T5 | T6 | T7>;
export declare function choice8<M, S extends ParserStream<M>, E1, E2, E3, E4, E5, E6, E7, E8, E9, T1, T2, T3, T4, T5, T6, T7, T8>(p1: [Parser<M, S, unknown, unknown>, Parser<M, S, E1, T1>], p2: [Parser<M, S, unknown, unknown>, Parser<M, S, E2, T2>], p3: [Parser<M, S, unknown, unknown>, Parser<M, S, E3, T3>], p4: [Parser<M, S, unknown, unknown>, Parser<M, S, E4, T4>], p5: [Parser<M, S, unknown, unknown>, Parser<M, S, E5, T5>], p6: [Parser<M, S, unknown, unknown>, Parser<M, S, E6, T6>], p7: [Parser<M, S, unknown, unknown>, Parser<M, S, E7, T7>], p8: [Parser<M, S, E9, unknown>, Parser<M, S, E8, T8>]): Parser<M, S, E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8 | E9, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;
