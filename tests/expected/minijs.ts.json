{
    "kind": "right",
    "value": [
        [
            {
                "kind": "block_statement",
                "statements": [
                    {
                        "kind": "block_statement",
                        "statements": [
                            {
                                "kind": "block_statement",
                                "statements": []
                            },
                            {
                                "kind": "function_decl",
                                "name": "innerFunction",
                                "params": [
                                    "arg"
                                ],
                                "body": {
                                    "kind": "block_statement",
                                    "statements": []
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "kind": "if_statement",
                "cond": {
                    "kind": "bool_expr",
                    "value": true
                },
                "ifTrue": {
                    "kind": "block_statement",
                    "statements": [
                        {
                            "kind": "const_decl",
                            "name": "x",
                            "expr": {
                                "kind": "num_expr",
                                "value": 10
                            }
                        }
                    ]
                }
            },
            {
                "kind": "if_statement",
                "cond": {
                    "kind": "bool_expr",
                    "value": false
                },
                "ifTrue": {
                    "kind": "block_statement",
                    "statements": [
                        {
                            "kind": "const_decl",
                            "name": "y",
                            "expr": {
                                "kind": "num_expr",
                                "value": 1
                            }
                        }
                    ]
                },
                "ifFalse": {
                    "kind": "block_statement",
                    "statements": [
                        {
                            "kind": "const_decl",
                            "name": "y",
                            "expr": {
                                "kind": "num_expr",
                                "value": 2
                            }
                        }
                    ]
                }
            },
            {
                "kind": "const_decl",
                "name": "lambda1",
                "expr": {
                    "kind": "lambda_expr",
                    "params": [
                        "x"
                    ],
                    "body": {
                        "kind": "var_expr",
                        "name": "x"
                    }
                }
            },
            {
                "kind": "const_decl",
                "name": "flip1",
                "expr": {
                    "kind": "lambda_expr",
                    "params": [
                        "f"
                    ],
                    "body": {
                        "kind": "lambda_expr",
                        "params": [
                            "x",
                            "y"
                        ],
                        "body": {
                            "kind": "call_expr",
                            "fn": {
                                "kind": "var_expr",
                                "name": "f"
                            },
                            "args": [
                                {
                                    "kind": "var_expr",
                                    "name": "y"
                                },
                                {
                                    "kind": "var_expr",
                                    "name": "x"
                                }
                            ]
                        }
                    }
                }
            },
            {
                "kind": "function_decl",
                "name": "lambda2",
                "params": [
                    "x"
                ],
                "body": {
                    "kind": "block_statement",
                    "statements": [
                        {
                            "kind": "return_statement",
                            "expr": {
                                "kind": "var_expr",
                                "name": "x"
                            }
                        }
                    ]
                }
            },
            {
                "kind": "function_decl",
                "name": "flip2",
                "params": [
                    "f",
                    "x",
                    "y"
                ],
                "body": {
                    "kind": "block_statement",
                    "statements": [
                        {
                            "kind": "return_statement",
                            "expr": {
                                "kind": "call_expr",
                                "fn": {
                                    "kind": "var_expr",
                                    "name": "f"
                                },
                                "args": [
                                    {
                                        "kind": "var_expr",
                                        "name": "y"
                                    },
                                    {
                                        "kind": "var_expr",
                                        "name": "x"
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                "kind": "function_decl",
                "name": "main",
                "params": [],
                "body": {
                    "kind": "block_statement",
                    "statements": [
                        {
                            "kind": "const_decl",
                            "name": "s",
                            "expr": {
                                "kind": "str_expr",
                                "value": "hello world'\n :D"
                            }
                        },
                        {
                            "kind": "const_decl",
                            "name": "n",
                            "expr": {
                                "kind": "num_expr",
                                "value": 42
                            }
                        },
                        {
                            "kind": "const_decl",
                            "name": "id",
                            "expr": {
                                "kind": "lambda_expr",
                                "params": [
                                    "x"
                                ],
                                "body": {
                                    "kind": "var_expr",
                                    "name": "x"
                                }
                            }
                        },
                        {
                            "kind": "const_decl",
                            "name": "toString",
                            "expr": {
                                "kind": "lambda_expr",
                                "params": [
                                    "x"
                                ],
                                "body": {
                                    "kind": "call_expr",
                                    "fn": {
                                        "kind": "member_expr",
                                        "obj": {
                                            "kind": "var_expr",
                                            "name": "x"
                                        },
                                        "prop": "toString"
                                    },
                                    "args": []
                                }
                            }
                        },
                        {
                            "kind": "const_decl",
                            "name": "const",
                            "expr": {
                                "kind": "lambda_expr",
                                "params": [
                                    "x"
                                ],
                                "body": {
                                    "kind": "lambda_expr",
                                    "params": [
                                        "y"
                                    ],
                                    "body": {
                                        "kind": "var_expr",
                                        "name": "x"
                                    }
                                }
                            }
                        },
                        {
                            "kind": "const_decl",
                            "name": "hard",
                            "expr": {
                                "kind": "call_expr",
                                "fn": {
                                    "kind": "call_expr",
                                    "fn": {
                                        "kind": "var_expr",
                                        "name": "f"
                                    },
                                    "args": [
                                        {
                                            "kind": "index_expr",
                                            "obj": {
                                                "kind": "member_expr",
                                                "obj": {
                                                    "kind": "var_expr",
                                                    "name": "res"
                                                },
                                                "prop": "value"
                                            },
                                            "index": {
                                                "kind": "num_expr",
                                                "value": 0
                                            }
                                        }
                                    ]
                                },
                                "args": [
                                    {
                                        "kind": "index_expr",
                                        "obj": {
                                            "kind": "member_expr",
                                            "obj": {
                                                "kind": "var_expr",
                                                "name": "res"
                                            },
                                            "prop": "value"
                                        },
                                        "index": {
                                            "kind": "num_expr",
                                            "value": 1
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "kind": "return_statement",
                            "expr": {
                                "kind": "num_expr",
                                "value": 3
                            }
                        }
                    ]
                }
            }
        ],
        {
            "source": "\n{{\n    {}\n    function innerFunction(arg) {\n    }\n}}\n\nif (true) {\n    const x = 10;\n}\n\nif (false) {\n    const y = 1;\n} else {\n    const y = 2;\n}\n\nconst lambda1 = (x) => x;\nconst flip1 = f => (x,y) => f(y,x);\n\nfunction lambda2(x){return x;}function flip2(f, x,y){return f(y,x)}\n\n\nfunction main() {\n    const s = 'hello world\\'\\n :D';\n    const n = 42\n    const id = x => x;\n    const toString = x => x.toString();\n    const const = x => y => x;\n    const hard  = f(res.value[0])(res.value[1])\n\n    return 3;\n}\n",
            "offset": 510,
            "lineOffsetTable": [
                [
                    0,
                    ""
                ],
                [
                    1,
                    "{{"
                ],
                [
                    4,
                    "    {}"
                ],
                [
                    11,
                    "    function innerFunction(arg) {"
                ],
                [
                    45,
                    "    }"
                ],
                [
                    51,
                    "}}"
                ],
                [
                    54,
                    ""
                ],
                [
                    55,
                    "if (true) {"
                ],
                [
                    67,
                    "    const x = 10;"
                ],
                [
                    85,
                    "}"
                ],
                [
                    87,
                    ""
                ],
                [
                    88,
                    "if (false) {"
                ],
                [
                    101,
                    "    const y = 1;"
                ],
                [
                    118,
                    "} else {"
                ],
                [
                    127,
                    "    const y = 2;"
                ],
                [
                    144,
                    "}"
                ],
                [
                    146,
                    ""
                ],
                [
                    147,
                    "const lambda1 = (x) => x;"
                ],
                [
                    173,
                    "const flip1 = f => (x,y) => f(y,x);"
                ],
                [
                    209,
                    ""
                ],
                [
                    210,
                    "function lambda2(x){return x;}function flip2(f, x,y){return f(y,x)}"
                ],
                [
                    278,
                    ""
                ],
                [
                    279,
                    ""
                ],
                [
                    280,
                    "function main() {"
                ],
                [
                    298,
                    "    const s = 'hello world\\'\\n :D';"
                ],
                [
                    334,
                    "    const n = 42"
                ],
                [
                    351,
                    "    const id = x => x;"
                ],
                [
                    374,
                    "    const toString = x => x.toString();"
                ],
                [
                    414,
                    "    const const = x => y => x;"
                ],
                [
                    445,
                    "    const hard  = f(res.value[0])(res.value[1])"
                ],
                [
                    493,
                    ""
                ],
                [
                    494,
                    "    return 3;"
                ],
                [
                    508,
                    "}"
                ],
                [
                    510,
                    ""
                ]
            ]
        }
    ]
}

{
    "kind": "left",
    "value": {
        "kind": "pc_error",
        "code": "digit_expected"
    }
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "call_expr",
                    "fn": {
                        "kind": "member_expr",
                        "obj": {
                            "kind": "num_expr",
                            "value": 1
                        },
                        "prop": "toString"
                    },
                    "args": []
                }
            }
        ],
        {
            "source": "(1).toString()",
            "offset": 14,
            "lineOffsetTable": [
                [
                    0,
                    "(1).toString()"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "member_expr",
                    "obj": {
                        "kind": "str_expr",
                        "value": "hello"
                    },
                    "prop": "length"
                }
            }
        ],
        {
            "source": "'hello'.length",
            "offset": 14,
            "lineOffsetTable": [
                [
                    0,
                    "'hello'.length"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "call_expr",
                    "fn": {
                        "kind": "member_expr",
                        "obj": {
                            "kind": "array_expr",
                            "value": [
                                {
                                    "kind": "num_expr",
                                    "value": 1
                                },
                                {
                                    "kind": "num_expr",
                                    "value": 2
                                },
                                {
                                    "kind": "num_expr",
                                    "value": 3
                                }
                            ]
                        },
                        "prop": "map"
                    },
                    "args": [
                        {
                            "kind": "lambda_expr",
                            "params": [
                                "_"
                            ],
                            "body": {
                                "kind": "bool_expr",
                                "value": true
                            }
                        }
                    ]
                }
            }
        ],
        {
            "source": "[1, 2, 3].map(_ => true)",
            "offset": 24,
            "lineOffsetTable": [
                [
                    0,
                    "[1, 2, 3].map(_ => true)"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "object_expr",
                    "value": [
                        [
                            "key",
                            {
                                "kind": "str_expr",
                                "value": "value"
                            }
                        ],
                        [
                            "prop",
                            {
                                "kind": "num_expr",
                                "value": 5
                            }
                        ]
                    ]
                }
            }
        ],
        {
            "source": "({ key: 'value', 'prop': 5 })",
            "offset": 29,
            "lineOffsetTable": [
                [
                    0,
                    "({ key: 'value', 'prop': 5 })"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "const_decl",
                "name": "x",
                "expr": {
                    "kind": "array_expr",
                    "value": [
                        {
                            "kind": "num_expr",
                            "value": 1
                        },
                        {
                            "kind": "num_expr",
                            "value": 2
                        },
                        {
                            "kind": "num_expr",
                            "value": 3
                        }
                    ]
                }
            },
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "index_expr",
                    "obj": {
                        "kind": "var_expr",
                        "name": "x"
                    },
                    "index": {
                        "kind": "num_expr",
                        "value": 5
                    }
                }
            }
        ],
        {
            "source": "const x = [1, 2, 3]; x[5];",
            "offset": 26,
            "lineOffsetTable": [
                [
                    0,
                    "const x = [1, 2, 3]; x[5];"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "binary_expr",
                    "op": "+",
                    "left": {
                        "kind": "binary_expr",
                        "op": "+",
                        "left": {
                            "kind": "num_expr",
                            "value": 1
                        },
                        "right": {
                            "kind": "num_expr",
                            "value": 2
                        }
                    },
                    "right": {
                        "kind": "binary_expr",
                        "op": "*",
                        "left": {
                            "kind": "num_expr",
                            "value": 3
                        },
                        "right": {
                            "kind": "num_expr",
                            "value": 4
                        }
                    }
                }
            }
        ],
        {
            "source": "1 + 2 + 3 * 4;",
            "offset": 14,
            "lineOffsetTable": [
                [
                    0,
                    "1 + 2 + 3 * 4;"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "binary_expr",
                    "op": "||",
                    "left": {
                        "kind": "unary_expr",
                        "op": "-",
                        "expr": {
                            "kind": "unary_expr",
                            "op": "!",
                            "expr": {
                                "kind": "unary_expr",
                                "op": "-",
                                "expr": {
                                    "kind": "num_expr",
                                    "value": 1
                                }
                            }
                        }
                    },
                    "right": {
                        "kind": "binary_expr",
                        "op": "&&",
                        "left": {
                            "kind": "num_expr",
                            "value": 3
                        },
                        "right": {
                            "kind": "binary_expr",
                            "op": "+",
                            "left": {
                                "kind": "num_expr",
                                "value": 1
                            },
                            "right": {
                                "kind": "num_expr",
                                "value": 2
                            }
                        }
                    }
                }
            }
        ],
        {
            "source": "- !-1 || 3 && 1 + 2",
            "offset": 19,
            "lineOffsetTable": [
                [
                    0,
                    "- !-1 || 3 && 1 + 2"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "ternary_expr",
                    "cond": {
                        "kind": "bool_expr",
                        "value": true
                    },
                    "ifTrue": {
                        "kind": "num_expr",
                        "value": 1
                    },
                    "ifFalse": {
                        "kind": "num_expr",
                        "value": 2
                    }
                }
            }
        ],
        {
            "source": "true ? 1 : 2",
            "offset": 12,
            "lineOffsetTable": [
                [
                    0,
                    "true ? 1 : 2"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "ternary_expr",
                    "cond": {
                        "kind": "binary_expr",
                        "op": "||",
                        "left": {
                            "kind": "var_expr",
                            "name": "a"
                        },
                        "right": {
                            "kind": "var_expr",
                            "name": "b"
                        }
                    },
                    "ifTrue": {
                        "kind": "ternary_expr",
                        "cond": {
                            "kind": "var_expr",
                            "name": "a"
                        },
                        "ifTrue": {
                            "kind": "binary_expr",
                            "op": "*",
                            "left": {
                                "kind": "num_expr",
                                "value": 1
                            },
                            "right": {
                                "kind": "num_expr",
                                "value": 2
                            }
                        },
                        "ifFalse": {
                            "kind": "str_expr",
                            "value": "hello"
                        }
                    },
                    "ifFalse": {
                        "kind": "ternary_expr",
                        "cond": {
                            "kind": "var_expr",
                            "name": "b"
                        },
                        "ifTrue": {
                            "kind": "call_expr",
                            "fn": {
                                "kind": "var_expr",
                                "name": "f"
                            },
                            "args": [
                                {
                                    "kind": "num_expr",
                                    "value": 10
                                }
                            ]
                        },
                        "ifFalse": {
                            "kind": "member_expr",
                            "obj": {
                                "kind": "var_expr",
                                "name": "o"
                            },
                            "prop": "p"
                        }
                    }
                }
            }
        ],
        {
            "source": "a || b ? a ? 1 * 2 : 'hello' : b ? f(10) : o.p",
            "offset": 46,
            "lineOffsetTable": [
                [
                    0,
                    "a || b ? a ? 1 * 2 : 'hello' : b ? f(10) : o.p"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "ternary_expr",
                    "cond": {
                        "kind": "ternary_expr",
                        "cond": {
                            "kind": "bool_expr",
                            "value": true
                        },
                        "ifTrue": {
                            "kind": "bool_expr",
                            "value": false
                        },
                        "ifFalse": {
                            "kind": "bool_expr",
                            "value": true
                        }
                    },
                    "ifTrue": {
                        "kind": "str_expr",
                        "value": "no"
                    },
                    "ifFalse": {
                        "kind": "str_expr",
                        "value": "yes"
                    }
                }
            }
        ],
        {
            "source": "(true ? false : true) ? 'no' : 'yes'",
            "offset": 36,
            "lineOffsetTable": [
                [
                    0,
                    "(true ? false : true) ? 'no' : 'yes'"
                ]
            ]
        }
    ]
}

{
    "kind": "right",
    "value": [
        [
            {
                "kind": "expr_statement",
                "expr": {
                    "kind": "binary_expr",
                    "op": ">>=",
                    "left": {
                        "kind": "binary_expr",
                        "op": ">>=",
                        "left": {
                            "kind": "var_expr",
                            "name": "f"
                        },
                        "right": {
                            "kind": "var_expr",
                            "name": "g"
                        }
                    },
                    "right": {
                        "kind": "lambda_expr",
                        "params": [
                            "x"
                        ],
                        "body": {
                            "kind": "num_expr",
                            "value": 5
                        }
                    }
                }
            }
        ],
        {
            "source": "f >>= g >>= x => 5",
            "offset": 18,
            "lineOffsetTable": [
                [
                    0,
                    "f >>= g >>= x => 5"
                ]
            ]
        }
    ]
}
